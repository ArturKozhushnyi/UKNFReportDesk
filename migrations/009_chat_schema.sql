BEGIN;

-- ============================================================================
-- Migration: 009_chat_schema.sql
-- Purpose: Create chat/messaging system for support conversations
-- ============================================================================
-- 
-- Tables:
--   1. CONVERSATIONS - Main conversation/ticket records
--   2. CONVERSATION_PARTICIPANTS - Participants in conversations
--   3. MESSAGES - Individual messages with threading support
--   4. MESSAGE_ATTACHMENTS - File attachments for messages
--   5. READ_RECEIPTS - Message read tracking
--   6. MESSAGE_REACTIONS - Emoji reactions to messages
--   7. CONVERSATION_TAGS - Tags for filtering/searching
--   8. ASSIGNMENT_HISTORY - History of conversation assignments
--
-- References: USERS.ID, SUBJECTS.ID (existing tables)
-- ============================================================================

-- ============================================================================
-- Table: CONVERSATIONS
-- Purpose: Main conversation/ticket record for a company (SUBJECT)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "CONVERSATIONS" (
    "ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "SUBJECT_ID" BIGINT NOT NULL,
    "TYPE" VARCHAR(50) NOT NULL,
    "STATUS" VARCHAR(50) NOT NULL DEFAULT 'open',
    "PRIORITY" VARCHAR(50) NOT NULL DEFAULT 'normal',
    "TITLE" VARCHAR(500),
    "CREATED_BY_USER_ID" BIGINT NOT NULL,
    "ASSIGNED_TO_USER_ID" BIGINT,
    "CREATED_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    "UPDATED_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    "CLOSED_AT" TIMESTAMPTZ(6),
    "LAST_MESSAGE_AT" TIMESTAMPTZ(6),
    "METADATA" JSONB,
    
    -- Foreign keys
    CONSTRAINT "CONVERSATIONS_SUBJECT_FK" 
        FOREIGN KEY ("SUBJECT_ID") 
        REFERENCES "SUBJECTS"("ID") 
        ON DELETE CASCADE,
    
    CONSTRAINT "CONVERSATIONS_CREATED_BY_FK" 
        FOREIGN KEY ("CREATED_BY_USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE RESTRICT,
    
    CONSTRAINT "CONVERSATIONS_ASSIGNED_TO_FK" 
        FOREIGN KEY ("ASSIGNED_TO_USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE SET NULL,
    
    -- Check constraints for enums
    CONSTRAINT "CONVERSATIONS_TYPE_CHECK" 
        CHECK ("TYPE" IN ('support', 'inquiry', 'complaint', 'consultation', 'report')),
    
    CONSTRAINT "CONVERSATIONS_STATUS_CHECK" 
        CHECK ("STATUS" IN ('open', 'pending', 'resolved', 'closed', 'archived')),
    
    CONSTRAINT "CONVERSATIONS_PRIORITY_CHECK" 
        CHECK ("PRIORITY" IN ('low', 'normal', 'high', 'urgent', 'critical'))
);

-- Indexes for CONVERSATIONS
CREATE INDEX IF NOT EXISTS "IDX_CONVERSATIONS_SUBJECT_ID" 
    ON "CONVERSATIONS"("SUBJECT_ID");

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATIONS_STATUS" 
    ON "CONVERSATIONS"("STATUS") 
    WHERE "STATUS" IN ('open', 'pending');

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATIONS_ASSIGNED_TO" 
    ON "CONVERSATIONS"("ASSIGNED_TO_USER_ID") 
    WHERE "ASSIGNED_TO_USER_ID" IS NOT NULL;

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATIONS_CREATED_BY" 
    ON "CONVERSATIONS"("CREATED_BY_USER_ID");

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATIONS_PRIORITY" 
    ON "CONVERSATIONS"("PRIORITY", "STATUS");

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATIONS_LAST_MESSAGE" 
    ON "CONVERSATIONS"("LAST_MESSAGE_AT" DESC NULLS LAST);

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATIONS_CREATED_AT" 
    ON "CONVERSATIONS"("CREATED_AT" DESC);

-- ============================================================================
-- Table: CONVERSATION_PARTICIPANTS
-- Purpose: Track who is involved in each conversation
-- ============================================================================
CREATE TABLE IF NOT EXISTS "CONVERSATION_PARTICIPANTS" (
    "ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "CONVERSATION_ID" BIGINT NOT NULL,
    "USER_ID" BIGINT NOT NULL,
    "ROLE" VARCHAR(50) NOT NULL,
    "JOINED_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    "LEFT_AT" TIMESTAMPTZ(6),
    "IS_ACTIVE" BOOLEAN NOT NULL DEFAULT TRUE,
    
    -- Foreign keys
    CONSTRAINT "CONVERSATION_PARTICIPANTS_CONVERSATION_FK" 
        FOREIGN KEY ("CONVERSATION_ID") 
        REFERENCES "CONVERSATIONS"("ID") 
        ON DELETE CASCADE,
    
    CONSTRAINT "CONVERSATION_PARTICIPANTS_USER_FK" 
        FOREIGN KEY ("USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE CASCADE,
    
    -- Check constraints for enums
    CONSTRAINT "CONVERSATION_PARTICIPANTS_ROLE_CHECK" 
        CHECK ("ROLE" IN ('requester', 'agent', 'observer', 'manager')),
    
    -- Unique constraint: one user can have only one active role per conversation
    CONSTRAINT "CONVERSATION_PARTICIPANTS_UNIQUE" 
        UNIQUE ("CONVERSATION_ID", "USER_ID", "ROLE")
);

-- Indexes for CONVERSATION_PARTICIPANTS
CREATE INDEX IF NOT EXISTS "IDX_CONVERSATION_PARTICIPANTS_CONV_ID" 
    ON "CONVERSATION_PARTICIPANTS"("CONVERSATION_ID");

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATION_PARTICIPANTS_USER_ID" 
    ON "CONVERSATION_PARTICIPANTS"("USER_ID");

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATION_PARTICIPANTS_ROLE" 
    ON "CONVERSATION_PARTICIPANTS"("CONVERSATION_ID", "ROLE") 
    WHERE "IS_ACTIVE" = TRUE;

-- ============================================================================
-- Table: MESSAGES
-- Purpose: Store conversation messages with threading support
-- ============================================================================
CREATE TABLE IF NOT EXISTS "MESSAGES" (
    "ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "CONVERSATION_ID" BIGINT NOT NULL,
    "SENDER_USER_ID" BIGINT NOT NULL,
    "PARENT_MESSAGE_ID" BIGINT,
    "BODY" TEXT NOT NULL,
    "VISIBILITY" VARCHAR(50) NOT NULL DEFAULT 'public',
    "MESSAGE_TYPE" VARCHAR(50) NOT NULL DEFAULT 'message',
    "CREATED_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    "UPDATED_AT" TIMESTAMPTZ(6),
    "DELETED_AT" TIMESTAMPTZ(6),
    "IS_EDITED" BOOLEAN NOT NULL DEFAULT FALSE,
    "METADATA" JSONB,
    
    -- Foreign keys
    CONSTRAINT "MESSAGES_CONVERSATION_FK" 
        FOREIGN KEY ("CONVERSATION_ID") 
        REFERENCES "CONVERSATIONS"("ID") 
        ON DELETE CASCADE,
    
    CONSTRAINT "MESSAGES_SENDER_FK" 
        FOREIGN KEY ("SENDER_USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE RESTRICT,
    
    CONSTRAINT "MESSAGES_PARENT_FK" 
        FOREIGN KEY ("PARENT_MESSAGE_ID") 
        REFERENCES "MESSAGES"("ID") 
        ON DELETE SET NULL,
    
    -- Check constraints for enums
    CONSTRAINT "MESSAGES_VISIBILITY_CHECK" 
        CHECK ("VISIBILITY" IN ('public', 'internal')),
    
    CONSTRAINT "MESSAGES_TYPE_CHECK" 
        CHECK ("MESSAGE_TYPE" IN ('message', 'note', 'system', 'notification')),
    
    -- Body cannot be empty
    CONSTRAINT "MESSAGES_BODY_NOT_EMPTY" 
        CHECK (LENGTH(TRIM("BODY")) > 0)
);

-- Indexes for MESSAGES
CREATE INDEX IF NOT EXISTS "IDX_MESSAGES_CONVERSATION_ID" 
    ON "MESSAGES"("CONVERSATION_ID", "CREATED_AT" DESC);

CREATE INDEX IF NOT EXISTS "IDX_MESSAGES_SENDER_ID" 
    ON "MESSAGES"("SENDER_USER_ID");

CREATE INDEX IF NOT EXISTS "IDX_MESSAGES_PARENT_ID" 
    ON "MESSAGES"("PARENT_MESSAGE_ID") 
    WHERE "PARENT_MESSAGE_ID" IS NOT NULL;

CREATE INDEX IF NOT EXISTS "IDX_MESSAGES_VISIBILITY" 
    ON "MESSAGES"("CONVERSATION_ID", "VISIBILITY");

CREATE INDEX IF NOT EXISTS "IDX_MESSAGES_CREATED_AT" 
    ON "MESSAGES"("CREATED_AT" DESC);

CREATE INDEX IF NOT EXISTS "IDX_MESSAGES_NOT_DELETED" 
    ON "MESSAGES"("CONVERSATION_ID") 
    WHERE "DELETED_AT" IS NULL;

-- ============================================================================
-- Table: MESSAGE_ATTACHMENTS
-- Purpose: Store file attachments for messages
-- ============================================================================
CREATE TABLE IF NOT EXISTS "MESSAGE_ATTACHMENTS" (
    "ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "MESSAGE_ID" BIGINT NOT NULL,
    "FILE_NAME" VARCHAR(500) NOT NULL,
    "FILE_PATH" VARCHAR(1000) NOT NULL,
    "FILE_SIZE" BIGINT NOT NULL,
    "MIME_TYPE" VARCHAR(255) NOT NULL,
    "UPLOADED_BY_USER_ID" BIGINT NOT NULL,
    "UPLOADED_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    "METADATA" JSONB,
    
    -- Foreign keys
    CONSTRAINT "MESSAGE_ATTACHMENTS_MESSAGE_FK" 
        FOREIGN KEY ("MESSAGE_ID") 
        REFERENCES "MESSAGES"("ID") 
        ON DELETE CASCADE,
    
    CONSTRAINT "MESSAGE_ATTACHMENTS_UPLOADED_BY_FK" 
        FOREIGN KEY ("UPLOADED_BY_USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE RESTRICT,
    
    -- Check constraints
    CONSTRAINT "MESSAGE_ATTACHMENTS_FILE_SIZE_CHECK" 
        CHECK ("FILE_SIZE" > 0 AND "FILE_SIZE" <= 104857600), -- Max 100MB
    
    CONSTRAINT "MESSAGE_ATTACHMENTS_FILE_NAME_NOT_EMPTY" 
        CHECK (LENGTH(TRIM("FILE_NAME")) > 0)
);

-- Indexes for MESSAGE_ATTACHMENTS
CREATE INDEX IF NOT EXISTS "IDX_MESSAGE_ATTACHMENTS_MESSAGE_ID" 
    ON "MESSAGE_ATTACHMENTS"("MESSAGE_ID");

CREATE INDEX IF NOT EXISTS "IDX_MESSAGE_ATTACHMENTS_UPLOADED_BY" 
    ON "MESSAGE_ATTACHMENTS"("UPLOADED_BY_USER_ID");

CREATE INDEX IF NOT EXISTS "IDX_MESSAGE_ATTACHMENTS_MIME_TYPE" 
    ON "MESSAGE_ATTACHMENTS"("MIME_TYPE");

-- ============================================================================
-- Table: READ_RECEIPTS
-- Purpose: Track which users have read which messages
-- ============================================================================
CREATE TABLE IF NOT EXISTS "READ_RECEIPTS" (
    "ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "MESSAGE_ID" BIGINT NOT NULL,
    "USER_ID" BIGINT NOT NULL,
    "READ_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    
    -- Foreign keys
    CONSTRAINT "READ_RECEIPTS_MESSAGE_FK" 
        FOREIGN KEY ("MESSAGE_ID") 
        REFERENCES "MESSAGES"("ID") 
        ON DELETE CASCADE,
    
    CONSTRAINT "READ_RECEIPTS_USER_FK" 
        FOREIGN KEY ("USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE CASCADE,
    
    -- Unique constraint: one read receipt per user per message
    CONSTRAINT "READ_RECEIPTS_UNIQUE" 
        UNIQUE ("MESSAGE_ID", "USER_ID")
);

-- Indexes for READ_RECEIPTS
CREATE INDEX IF NOT EXISTS "IDX_READ_RECEIPTS_MESSAGE_ID" 
    ON "READ_RECEIPTS"("MESSAGE_ID");

CREATE INDEX IF NOT EXISTS "IDX_READ_RECEIPTS_USER_ID" 
    ON "READ_RECEIPTS"("USER_ID");

CREATE INDEX IF NOT EXISTS "IDX_READ_RECEIPTS_READ_AT" 
    ON "READ_RECEIPTS"("READ_AT" DESC);

-- ============================================================================
-- Table: MESSAGE_REACTIONS
-- Purpose: Store emoji reactions to messages
-- ============================================================================
CREATE TABLE IF NOT EXISTS "MESSAGE_REACTIONS" (
    "ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "MESSAGE_ID" BIGINT NOT NULL,
    "USER_ID" BIGINT NOT NULL,
    "EMOJI" VARCHAR(50) NOT NULL,
    "CREATED_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    
    -- Foreign keys
    CONSTRAINT "MESSAGE_REACTIONS_MESSAGE_FK" 
        FOREIGN KEY ("MESSAGE_ID") 
        REFERENCES "MESSAGES"("ID") 
        ON DELETE CASCADE,
    
    CONSTRAINT "MESSAGE_REACTIONS_USER_FK" 
        FOREIGN KEY ("USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE CASCADE,
    
    -- Check constraints
    CONSTRAINT "MESSAGE_REACTIONS_EMOJI_NOT_EMPTY" 
        CHECK (LENGTH(TRIM("EMOJI")) > 0),
    
    -- Unique constraint: one reaction per user per message per emoji
    CONSTRAINT "MESSAGE_REACTIONS_UNIQUE" 
        UNIQUE ("MESSAGE_ID", "USER_ID", "EMOJI")
);

-- Indexes for MESSAGE_REACTIONS
CREATE INDEX IF NOT EXISTS "IDX_MESSAGE_REACTIONS_MESSAGE_ID" 
    ON "MESSAGE_REACTIONS"("MESSAGE_ID");

CREATE INDEX IF NOT EXISTS "IDX_MESSAGE_REACTIONS_USER_ID" 
    ON "MESSAGE_REACTIONS"("USER_ID");

CREATE INDEX IF NOT EXISTS "IDX_MESSAGE_REACTIONS_EMOJI" 
    ON "MESSAGE_REACTIONS"("MESSAGE_ID", "EMOJI");

-- ============================================================================
-- Table: CONVERSATION_TAGS
-- Purpose: Tag conversations for filtering and searching
-- ============================================================================
CREATE TABLE IF NOT EXISTS "CONVERSATION_TAGS" (
    "ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "CONVERSATION_ID" BIGINT NOT NULL,
    "TAG" VARCHAR(100) NOT NULL,
    "ADDED_BY_USER_ID" BIGINT NOT NULL,
    "ADDED_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    
    -- Foreign keys
    CONSTRAINT "CONVERSATION_TAGS_CONVERSATION_FK" 
        FOREIGN KEY ("CONVERSATION_ID") 
        REFERENCES "CONVERSATIONS"("ID") 
        ON DELETE CASCADE,
    
    CONSTRAINT "CONVERSATION_TAGS_ADDED_BY_FK" 
        FOREIGN KEY ("ADDED_BY_USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE RESTRICT,
    
    -- Check constraints
    CONSTRAINT "CONVERSATION_TAGS_TAG_NOT_EMPTY" 
        CHECK (LENGTH(TRIM("TAG")) > 0),
    
    CONSTRAINT "CONVERSATION_TAGS_TAG_FORMAT" 
        CHECK ("TAG" ~ '^[a-z0-9\-_]+$'), -- lowercase, numbers, hyphens, underscores only
    
    -- Unique constraint: one tag per conversation
    CONSTRAINT "CONVERSATION_TAGS_UNIQUE" 
        UNIQUE ("CONVERSATION_ID", "TAG")
);

-- Indexes for CONVERSATION_TAGS
CREATE INDEX IF NOT EXISTS "IDX_CONVERSATION_TAGS_CONVERSATION_ID" 
    ON "CONVERSATION_TAGS"("CONVERSATION_ID");

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATION_TAGS_TAG" 
    ON "CONVERSATION_TAGS"("TAG");

CREATE INDEX IF NOT EXISTS "IDX_CONVERSATION_TAGS_ADDED_BY" 
    ON "CONVERSATION_TAGS"("ADDED_BY_USER_ID");

-- GIN index for tag search
CREATE INDEX IF NOT EXISTS "IDX_CONVERSATION_TAGS_TAG_TRGM" 
    ON "CONVERSATION_TAGS" USING GIN ("TAG" gin_trgm_ops);

-- ============================================================================
-- Table: ASSIGNMENT_HISTORY
-- Purpose: Track conversation assignment history
-- ============================================================================
CREATE TABLE IF NOT EXISTS "ASSIGNMENT_HISTORY" (
    "ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "CONVERSATION_ID" BIGINT NOT NULL,
    "ASSIGNED_FROM_USER_ID" BIGINT,
    "ASSIGNED_TO_USER_ID" BIGINT,
    "ASSIGNED_BY_USER_ID" BIGINT NOT NULL,
    "ASSIGNED_AT" TIMESTAMPTZ(6) NOT NULL DEFAULT NOW(),
    "NOTE" TEXT,
    
    -- Foreign keys
    CONSTRAINT "ASSIGNMENT_HISTORY_CONVERSATION_FK" 
        FOREIGN KEY ("CONVERSATION_ID") 
        REFERENCES "CONVERSATIONS"("ID") 
        ON DELETE CASCADE,
    
    CONSTRAINT "ASSIGNMENT_HISTORY_FROM_FK" 
        FOREIGN KEY ("ASSIGNED_FROM_USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE SET NULL,
    
    CONSTRAINT "ASSIGNMENT_HISTORY_TO_FK" 
        FOREIGN KEY ("ASSIGNED_TO_USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE SET NULL,
    
    CONSTRAINT "ASSIGNMENT_HISTORY_BY_FK" 
        FOREIGN KEY ("ASSIGNED_BY_USER_ID") 
        REFERENCES "USERS"("ID") 
        ON DELETE RESTRICT
);

-- Indexes for ASSIGNMENT_HISTORY
CREATE INDEX IF NOT EXISTS "IDX_ASSIGNMENT_HISTORY_CONVERSATION_ID" 
    ON "ASSIGNMENT_HISTORY"("CONVERSATION_ID", "ASSIGNED_AT" DESC);

CREATE INDEX IF NOT EXISTS "IDX_ASSIGNMENT_HISTORY_ASSIGNED_TO" 
    ON "ASSIGNMENT_HISTORY"("ASSIGNED_TO_USER_ID");

CREATE INDEX IF NOT EXISTS "IDX_ASSIGNMENT_HISTORY_ASSIGNED_BY" 
    ON "ASSIGNMENT_HISTORY"("ASSIGNED_BY_USER_ID");

CREATE INDEX IF NOT EXISTS "IDX_ASSIGNMENT_HISTORY_ASSIGNED_AT" 
    ON "ASSIGNMENT_HISTORY"("ASSIGNED_AT" DESC);

-- ============================================================================
-- Enable pg_trgm extension for fuzzy text search (if not already enabled)
-- ============================================================================
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- ============================================================================
-- Comments for documentation
-- ============================================================================

COMMENT ON TABLE "CONVERSATIONS" IS 'Main conversation/ticket records for support system';
COMMENT ON TABLE "CONVERSATION_PARTICIPANTS" IS 'Participants in conversations (requester, agent, observer, manager)';
COMMENT ON TABLE "MESSAGES" IS 'Individual messages with threading support';
COMMENT ON TABLE "MESSAGE_ATTACHMENTS" IS 'File attachments for messages (max 100MB per file)';
COMMENT ON TABLE "READ_RECEIPTS" IS 'Track which users have read which messages';
COMMENT ON TABLE "MESSAGE_REACTIONS" IS 'Emoji reactions to messages';
COMMENT ON TABLE "CONVERSATION_TAGS" IS 'Tags for filtering and searching conversations';
COMMENT ON TABLE "ASSIGNMENT_HISTORY" IS 'History of conversation assignments to staff';

COMMIT;

-- ============================================================================
-- Usage Examples (for reference - not executed)
-- ============================================================================

-- Example 1: Create a new conversation
-- INSERT INTO "CONVERSATIONS" ("SUBJECT_ID", "TYPE", "CREATED_BY_USER_ID", "TITLE", "PRIORITY")
-- VALUES (1, 'support', 5, 'Unable to submit monthly report', 'high')
-- RETURNING "ID";

-- Example 2: Add participants
-- INSERT INTO "CONVERSATION_PARTICIPANTS" ("CONVERSATION_ID", "USER_ID", "ROLE")
-- VALUES 
--   (1, 5, 'requester'),  -- client
--   (1, 3, 'agent');       -- staff member

-- Example 3: Send a message
-- INSERT INTO "MESSAGES" ("CONVERSATION_ID", "SENDER_USER_ID", "BODY", "VISIBILITY")
-- VALUES (1, 5, 'I cannot access the report submission form.', 'public');
-- 
-- UPDATE "CONVERSATIONS" SET "LAST_MESSAGE_AT" = NOW() WHERE "ID" = 1;

-- Example 4: Add internal note (not visible to client)
-- INSERT INTO "MESSAGES" ("CONVERSATION_ID", "SENDER_USER_ID", "BODY", "VISIBILITY", "MESSAGE_TYPE")
-- VALUES (1, 3, 'User needs password reset - checking with IT', 'internal', 'note');

-- Example 5: Assign conversation to staff
-- UPDATE "CONVERSATIONS" SET "ASSIGNED_TO_USER_ID" = 3 WHERE "ID" = 1;
-- 
-- INSERT INTO "ASSIGNMENT_HISTORY" ("CONVERSATION_ID", "ASSIGNED_TO_USER_ID", "ASSIGNED_BY_USER_ID", "NOTE")
-- VALUES (1, 3, 2, 'Assigned to senior agent for technical issue');

-- Example 6: Mark message as read
-- INSERT INTO "READ_RECEIPTS" ("MESSAGE_ID", "USER_ID")
-- VALUES (10, 3)
-- ON CONFLICT ("MESSAGE_ID", "USER_ID") DO NOTHING;

-- Example 7: Add reaction
-- INSERT INTO "MESSAGE_REACTIONS" ("MESSAGE_ID", "USER_ID", "EMOJI")
-- VALUES (10, 3, '👍')
-- ON CONFLICT ("MESSAGE_ID", "USER_ID", "EMOJI") DO NOTHING;

-- Example 8: Add tags
-- INSERT INTO "CONVERSATION_TAGS" ("CONVERSATION_ID", "TAG", "ADDED_BY_USER_ID")
-- VALUES 
--   (1, 'vip', 2),
--   (1, 'urgent', 2),
--   (1, 'technical-issue', 2);

