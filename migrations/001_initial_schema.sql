BEGIN;

-- ============================================================================
-- Table: SUBJECTS
-- ============================================================================
CREATE TABLE IF NOT EXISTS "SUBJECTS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY,
    "TYPE_STRUCTURE" varchar(250),
    "CODE_UKNF" varchar(250),
    "NAME_STRUCTURE" varchar(500),
    "LEI" varchar(20),
    "NIP" varchar(10),
    "KRS" varchar(10),
    "STREET" varchar(250),
    "NR_STRET" varchar(250),
    "NR_HOUSE" varchar(250),
    "POST_CODE" varchar(250),
    "TOWN" varchar(250),
    "PHONE" varchar(250),
    "EMAIL" varchar(500),
    "UKNF_ID" varchar(100),
    "STATUS_S" varchar(250),
    "KATEGORY_S" varchar(500),
    "SELEKTOR_S" varchar(500),
    "SUBSELEKTOR_S" varchar(500),
    "TRANS_S" boolean,
    "DATE_CREATE" timestamptz,
    "DATE_ACTRUALIZATION" timestamptz(6)
);

-- ============================================================================
-- Table: USERS
-- ============================================================================
CREATE TABLE IF NOT EXISTS "USERS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY,
    "USER_NAME" varchar(250),
    "USER_LASTNAME" varchar(250),
    "PHONE" varchar(250),
    "EMAIL" varchar(500),
    "PESEL" varchar(11),
    "PASSWORD_HASH" varchar(64),
    "IS_USER_ACTIVE" boolean,
    "UKNF_ID" varchar(100)
);

-- ============================================================================
-- Table: GROUPS
-- ============================================================================
CREATE TABLE IF NOT EXISTS "GROUPS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY,
    "GROUP_NAME" varchar(250)
);

-- ============================================================================
-- Table: USERS_GROUPS
-- ============================================================================
CREATE TABLE IF NOT EXISTS "USERS_GROUPS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY,
    "USER_ID" bigint,
    "GROUP_ID" bigint
);

-- ============================================================================
-- Table: RESOURCES
-- ============================================================================
CREATE TABLE IF NOT EXISTS "RESOURCES" (
    "ID" varchar(50)
);

-- ============================================================================
-- Table: RESOURCES_ALLOW_LIST
-- ============================================================================
CREATE TABLE IF NOT EXISTS "RESOURCES_ALLOW_LIST" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY,
    "RESOURCE_ID" varchar(50),
    "USER_ID" bigint,
    "GROUP_ID" bigint
);

-- ============================================================================
-- Primary Key Constraints
-- ============================================================================

-- PK for SUBJECTS
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'SUBJECTS_PK'
    ) THEN
        ALTER TABLE "SUBJECTS" ADD CONSTRAINT "SUBJECTS_PK" PRIMARY KEY ("ID");
    END IF;
END $$;

-- PK for USERS
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'USERS_PK'
    ) THEN
        ALTER TABLE "USERS" ADD CONSTRAINT "USERS_PK" PRIMARY KEY ("ID");
    END IF;
END $$;

-- PK for GROUPS
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'GROUPS_PK'
    ) THEN
        ALTER TABLE "GROUPS" ADD CONSTRAINT "GROUPS_PK" PRIMARY KEY ("ID");
    END IF;
END $$;

-- PK for USERS_GROUPS
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'USERS_GROUPS_PK'
    ) THEN
        ALTER TABLE "USERS_GROUPS" ADD CONSTRAINT "USERS_GROUPS_PK" PRIMARY KEY ("ID");
    END IF;
END $$;

-- PK for RESOURCES
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'RESOURCES_PK'
    ) THEN
        ALTER TABLE "RESOURCES" ADD CONSTRAINT "RESOURCES_PK" PRIMARY KEY ("ID");
    END IF;
END $$;

-- PK for RESOURCES_ALLOW_LIST
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'RESOURCES_ALLOW_LIST_PK'
    ) THEN
        ALTER TABLE "RESOURCES_ALLOW_LIST" ADD CONSTRAINT "RESOURCES_ALLOW_LIST_PK" PRIMARY KEY ("ID");
    END IF;
END $$;

-- ============================================================================
-- Foreign Key Constraints
-- ============================================================================

-- FK: USERS_GROUPS.USER_ID -> USERS.ID
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'USERS_GROUPS_USER_ID_FK'
    ) THEN
        ALTER TABLE "USERS_GROUPS" ADD CONSTRAINT "USERS_GROUPS_USER_ID_FK" 
        FOREIGN KEY ("USER_ID") REFERENCES "USERS"("ID");
    END IF;
END $$;

-- FK: USERS_GROUPS.GROUP_ID -> GROUPS.ID
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'USERS_GROUPS_GROUP_ID_FK'
    ) THEN
        ALTER TABLE "USERS_GROUPS" ADD CONSTRAINT "USERS_GROUPS_GROUP_ID_FK" 
        FOREIGN KEY ("GROUP_ID") REFERENCES "GROUPS"("ID");
    END IF;
END $$;

-- FK: RESOURCES_ALLOW_LIST.RESOURCE_ID -> RESOURCES.ID
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'RES_ALLOW_RESOURCE_ID_FK'
    ) THEN
        ALTER TABLE "RESOURCES_ALLOW_LIST" ADD CONSTRAINT "RES_ALLOW_RESOURCE_ID_FK" 
        FOREIGN KEY ("RESOURCE_ID") REFERENCES "RESOURCES"("ID");
    END IF;
END $$;

-- FK: RESOURCES_ALLOW_LIST.USER_ID -> USERS.ID
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'RES_ALLOW_USER_ID_FK'
    ) THEN
        ALTER TABLE "RESOURCES_ALLOW_LIST" ADD CONSTRAINT "RES_ALLOW_USER_ID_FK" 
        FOREIGN KEY ("USER_ID") REFERENCES "USERS"("ID");
    END IF;
END $$;

-- FK: RESOURCES_ALLOW_LIST.GROUP_ID -> GROUPS.ID
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'RES_ALLOW_GROUP_ID_FK'
    ) THEN
        ALTER TABLE "RESOURCES_ALLOW_LIST" ADD CONSTRAINT "RES_ALLOW_GROUP_ID_FK" 
        FOREIGN KEY ("GROUP_ID") REFERENCES "GROUPS"("ID");
    END IF;
END $$;

COMMIT;
