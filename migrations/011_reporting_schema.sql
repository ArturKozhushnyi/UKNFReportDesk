BEGIN;

-- ============================================================================
-- Migration: 011_reporting_schema.sql
-- Purpose: Implement reporting system for UKNF Report Desk
-- ============================================================================
-- 
-- Tables:
--   1. REPORT_STATUS_DICT - Status codes dictionary (single source of truth)
--   2. REPORT_TYPES - Report type definitions
--   3. REPORT_TEMPLATES - Report templates with versions
--   4. REPORTING_PERIODS - Normalized reporting periods
--   5. EXPECTED_REPORTS - Expected report deadlines
--   6. REPORTS - Report records (logical objects)
--   7. REPORT_FILES - Report file versions
--   8. VALIDATION_RUNS - Validation job tracking
--   9. VALIDATION_ERRORS - Validation error details
--  10. REPORT_STATUS_HISTORY - Report status change history
--  11. REPORT_CONVERSATIONS - Link reports to chat conversations
--  12. REPORT_REMINDERS - Reminder scheduling
--
-- References: SUBJECTS, USERS, CONVERSATIONS (existing tables)
-- ============================================================================

-- ============================================================================
-- 0) Справочник статусов отчётного процесса (единый источник истины)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "REPORT_STATUS_DICT" (
    "CODE" varchar(50) PRIMARY KEY,                    -- машинный код
    "LABEL" varchar(200) NOT NULL,                     -- человекочитаемое имя
    "ORDER_NUM" smallint NOT NULL,                     -- порядок показа
    "FINAL" boolean NOT NULL DEFAULT false             -- финальное состояние?
);

-- Наполнение (идемпотентно)
INSERT INTO "REPORT_STATUS_DICT" ("CODE","LABEL","ORDER_NUM","FINAL") VALUES
    ('DRAFT',                 'Robocze',                                   10, false),
    ('SUBMITTED',             'Przekazane',                                20, false),
    ('IN_PROGRESS',           'W trakcie',                                 30, false),
    ('SUCCESS',               'Proces walidacji zakończony sukcesem',      40, true),
    ('RULE_ERRORS',           'Błędy z reguł walidacji',                   50, true),
    ('TECH_ERROR',            'Błąd techniczny w процессе валидacji',      60, true),
    ('TIMEOUT',               'Błąd – przekroczono czas',                  70, true),
    ('QUESTIONED_BY_UKNF',    'Zakwestionowane przez UKNF',                80, true)
ON CONFLICT ("CODE") DO NOTHING;

-- ============================================================================
-- 1) Типы отчётов и шаблоны
-- ============================================================================
CREATE TABLE IF NOT EXISTS "REPORT_TYPES" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "CODE" varchar(100) NOT NULL UNIQUE,             -- напр. 'RIP'
    "NAME" varchar(300) NOT NULL,                    -- человекочит. название
    "CATEGORY" varchar(30) NOT NULL,                 -- 'quarterly' | 'annual' | 'other'
    CONSTRAINT "REPORT_TYPES_CATEGORY_CHK" CHECK ("CATEGORY" IN ('quarterly','annual','other'))
);

CREATE TABLE IF NOT EXISTS "REPORT_TEMPLATES" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "REPORT_TYPE_ID" bigint NOT NULL,
    "VERSION" varchar(50) NOT NULL,                  -- версия шаблона
    "STORAGE_URL" varchar(2000) NOT NULL,            -- где лежит XLSX-шаблон
    "ACTIVE_FROM" date,
    "ACTIVE_TO" date,
    CONSTRAINT "REPORT_TEMPLATES_TYPE_FK" FOREIGN KEY ("REPORT_TYPE_ID") REFERENCES "REPORT_TYPES"("ID") ON DELETE CASCADE
);

-- ============================================================================
-- 2) Периоды отчётности (нормализованные)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "REPORTING_PERIODS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "PERIOD_TYPE" varchar(20) NOT NULL,           -- 'quarterly' | 'annual' | 'other'
    "YEAR" integer NOT NULL,
    "QUARTER" smallint,                           -- 1..4 (только для quarterly)
    "START_DATE" date NOT NULL,
    "END_DATE" date NOT NULL,
    CONSTRAINT "REPORTING_PERIODS_TYPE_CHK" CHECK ("PERIOD_TYPE" IN ('quarterly','annual','other')),
    CONSTRAINT "REPORTING_PERIODS_QUARTER_CHK" CHECK (
        ("PERIOD_TYPE"='quarterly' AND "QUARTER" BETWEEN 1 AND 4)
        OR ("PERIOD_TYPE" IN ('annual','other') AND "QUARTER" IS NULL)
    ),
    CONSTRAINT "REPORTING_PERIODS_UNQ" UNIQUE ("PERIOD_TYPE","YEAR","QUARTER")
);

-- ============================================================================
-- 3) Ожидаемые отчёты (для дедлайнов и «неподавших»)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "EXPECTED_REPORTS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "SUBJECT_ID" bigint NOT NULL,
    "REPORT_TYPE_ID" bigint NOT NULL,
    "PERIOD_ID" bigint NOT NULL,
    "DUE_AT" timestamptz(6) NOT NULL,                 -- дедлайн сдачи
    "STATUS" varchar(20) NOT NULL DEFAULT 'expected', -- 'expected' | 'waived'
    "DATE_CREATE" timestamptz(6) NOT NULL DEFAULT now(),
    CONSTRAINT "EXPECTED_STATUS_CHK" CHECK ("STATUS" IN ('expected','waived')),
    CONSTRAINT "EXPECTED_SUBJECT_FK" FOREIGN KEY ("SUBJECT_ID")     REFERENCES "SUBJECTS"("ID") ON DELETE CASCADE,
    CONSTRAINT "EXPECTED_TYPE_FK"    FOREIGN KEY ("REPORT_TYPE_ID") REFERENCES "REPORT_TYPES"("ID") ON DELETE RESTRICT,
    CONSTRAINT "EXPECTED_PERIOD_FK"  FOREIGN KEY ("PERIOD_ID")      REFERENCES "REPORTING_PERIODS"("ID") ON DELETE RESTRICT,
    CONSTRAINT "EXPECTED_UNQ" UNIQUE ("SUBJECT_ID","REPORT_TYPE_ID","PERIOD_ID")
);

CREATE INDEX IF NOT EXISTS "EXPECTED_DUE_IDX" ON "EXPECTED_REPORTS" ("DUE_AT");
CREATE INDEX IF NOT EXISTS "EXPECTED_LOOKUP_IDX" ON "EXPECTED_REPORTS" ("SUBJECT_ID","REPORT_TYPE_ID","PERIOD_ID");

-- ============================================================================
-- 4) Карточка отчёта (логический объект)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "REPORTS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "SUBJECT_ID" bigint NOT NULL,                   -- чей отчёт
    "REPORT_TYPE_ID" bigint NOT NULL,
    "PERIOD_ID" bigint NOT NULL,
    "CREATED_BY_USER_ID" bigint NOT NULL,
    "CURRENT_STATUS" varchar(50) NOT NULL DEFAULT 'DRAFT', -- FK → dict
    "HAS_CORRECTION" boolean NOT NULL DEFAULT false,
    "IS_ARCHIVED" boolean NOT NULL DEFAULT false,
    "ARCHIVED_AT" timestamptz(6),
    "DATE_CREATE" timestamptz(6) NOT NULL DEFAULT now(),
    "DATE_ACTUALIZATION" timestamptz(6),

    CONSTRAINT "REPORTS_SUBJECT_FK"   FOREIGN KEY ("SUBJECT_ID")       REFERENCES "SUBJECTS"("ID") ON DELETE RESTRICT,
    CONSTRAINT "REPORTS_TYPE_FK"      FOREIGN KEY ("REPORT_TYPE_ID")   REFERENCES "REPORT_TYPES"("ID") ON DELETE RESTRICT,
    CONSTRAINT "REPORTS_PERIOD_FK"    FOREIGN KEY ("PERIOD_ID")        REFERENCES "REPORTING_PERIODS"("ID") ON DELETE RESTRICT,
    CONSTRAINT "REPORTS_CREATED_BY_FK"FOREIGN KEY ("CREATED_BY_USER_ID") REFERENCES "USERS"("ID") ON DELETE RESTRICT,
    CONSTRAINT "REPORTS_STATUS_FK"    FOREIGN KEY ("CURRENT_STATUS")   REFERENCES "REPORT_STATUS_DICT"("CODE") ON DELETE RESTRICT,
    CONSTRAINT "REPORTS_UNQ" UNIQUE ("SUBJECT_ID","REPORT_TYPE_ID","PERIOD_ID") -- один логический отчёт на период
);

CREATE INDEX IF NOT EXISTS "REPORTS_STATUS_IDX" ON "REPORTS" ("CURRENT_STATUS");
CREATE INDEX IF NOT EXISTS "REPORTS_ARCH_IDX"   ON "REPORTS" ("IS_ARCHIVED");

-- ============================================================================
-- 5) Версии файла отчёта (исходная + корректировки)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "REPORT_FILES" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "REPORT_ID" bigint NOT NULL,
    "VERSION_NO" integer NOT NULL,                      -- 1=первич., 2..=корректировки
    "UPLOADED_BY_USER_ID" bigint NOT NULL,
    "ORIGINAL_FILE_NAME" varchar(500) NOT NULL,
    "MIME_TYPE" varchar(150) NOT NULL DEFAULT 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    "SIZE_BYTES" bigint,
    "STORAGE_URL" varchar(2000) NOT NULL,              -- где хранится файл
    "UPLOADED_AT" timestamptz(6) NOT NULL DEFAULT now(),

    CONSTRAINT "REPORT_FILES_REPORT_FK" FOREIGN KEY ("REPORT_ID") REFERENCES "REPORTS"("ID") ON DELETE CASCADE,
    CONSTRAINT "REPORT_FILES_UPLOADER_FK" FOREIGN KEY ("UPLOADED_BY_USER_ID") REFERENCES "USERS"("ID") ON DELETE RESTRICT,
    CONSTRAINT "REPORT_FILES_UNQ" UNIQUE ("REPORT_ID","VERSION_NO")
);

CREATE INDEX IF NOT EXISTS "REPORT_FILES_REPORT_IDX" ON "REPORT_FILES" ("REPORT_ID","VERSION_NO");

-- ============================================================================
-- 6) Запуски валидации (по каждой версии файла)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "VALIDATION_RUNS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "REPORT_FILE_ID" bigint NOT NULL,
    "EXTERNAL_JOB_ID" varchar(200),             -- ID задания во внешнем валидаторе
    "STATUS" varchar(50) NOT NULL,              -- FK → dict (маппим: SUBMITTED/IN_PROGRESS/SUCCESS/…)
    "METADATA" jsonb,                           -- идентификатор UKNF, имя субъекта, периоды и т.п.
    "REPORT_LINK_URL" varchar(2000),            -- ссылка на отчёт о валидации (pdf/html)
    "STARTED_AT" timestamptz(6) NOT NULL DEFAULT now(),
    "FINISHED_AT" timestamptz(6),

    CONSTRAINT "VAL_RUNS_FILE_FK" FOREIGN KEY ("REPORT_FILE_ID") REFERENCES "REPORT_FILES"("ID") ON DELETE CASCADE,
    CONSTRAINT "VAL_RUNS_STATUS_FK" FOREIGN KEY ("STATUS") REFERENCES "REPORT_STATUS_DICT"("CODE") ON DELETE RESTRICT
);

CREATE INDEX IF NOT EXISTS "VAL_RUNS_FILE_IDX" ON "VALIDATION_RUNS" ("REPORT_FILE_ID");
CREATE INDEX IF NOT EXISTS "VAL_RUNS_STATUS_IDX" ON "VALIDATION_RUNS" ("STATUS");

-- ============================================================================
-- 7) Детали ошибок валидации
-- ============================================================================
CREATE TABLE IF NOT EXISTS "VALIDATION_ERRORS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "VALIDATION_RUN_ID" bigint NOT NULL,
    "RULE_CODE" varchar(200),                 -- код правила/валидации
    "SEVERITY" varchar(20) NOT NULL,          -- 'error' | 'warning'
    "MESSAGE" text NOT NULL,                  -- человекочитаемое описание
    "SHEET" varchar(200),
    "ROW_NUM" integer,
    "COLUMN_NAME" varchar(200),
    "CELL_REF" varchar(50),
    "CONTEXT" jsonb,                          -- любые доп. данные

    CONSTRAINT "VAL_ERR_RUN_FK" FOREIGN KEY ("VALIDATION_RUN_ID") REFERENCES "VALIDATION_RUNS"("ID") ON DELETE CASCADE,
    CONSTRAINT "VAL_ERR_SEVERITY_CHK" CHECK ("SEVERITY" IN ('error','warning'))
);

CREATE INDEX IF NOT EXISTS "VAL_ERR_RUN_IDX" ON "VALIDATION_ERRORS" ("VALIDATION_RUN_ID");
CREATE INDEX IF NOT EXISTS "VAL_ERR_SEVERITY_IDX" ON "VALIDATION_ERRORS" ("SEVERITY");

-- ============================================================================
-- 8) История смены статусов отчёта
-- ============================================================================
CREATE TABLE IF NOT EXISTS "REPORT_STATUS_HISTORY" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "REPORT_ID" bigint NOT NULL,
    "STATUS_CODE" varchar(50) NOT NULL,
    "CHANGED_AT" timestamptz(6) NOT NULL DEFAULT now(),
    "CHANGED_BY_USER_ID" bigint,               -- кто перевёл (может быть NULL при автообновлении)
    "NOTE" varchar(1000),

    CONSTRAINT "RPT_HIST_REPORT_FK" FOREIGN KEY ("REPORT_ID") REFERENCES "REPORTS"("ID") ON DELETE CASCADE,
    CONSTRAINT "RPT_HIST_STATUS_FK" FOREIGN KEY ("STATUS_CODE") REFERENCES "REPORT_STATUS_DICT"("CODE") ON DELETE RESTRICT,
    CONSTRAINT "RPT_HIST_USER_FK"   FOREIGN KEY ("CHANGED_BY_USER_ID") REFERENCES "USERS"("ID") ON DELETE SET NULL
);

CREATE INDEX IF NOT EXISTS "RPT_HIST_REPORT_IDX" ON "REPORT_STATUS_HISTORY" ("REPORT_ID","CHANGED_AT" DESC);

-- ============================================================================
-- 9) Связка отчёта с диалогами чата (один отчёт ↔ несколько диалогов допускается)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "REPORT_CONVERSATIONS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "REPORT_ID" bigint NOT NULL,
    "CONVERSATION_ID" bigint NOT NULL,

    CONSTRAINT "RPT_CONV_REPORT_FK" FOREIGN KEY ("REPORT_ID") REFERENCES "REPORTS"("ID") ON DELETE CASCADE,
    CONSTRAINT "RPT_CONV_CONV_FK"   FOREIGN KEY ("CONVERSATION_ID") REFERENCES "CONVERSATIONS"("ID") ON DELETE CASCADE,
    CONSTRAINT "RPT_CONV_UNQ"       UNIQUE ("REPORT_ID","CONVERSATION_ID")
);

CREATE INDEX IF NOT EXISTS "RPT_CONV_REPORT_IDX" ON "REPORT_CONVERSATIONS" ("REPORT_ID");

-- ============================================================================
-- 10) Напоминания (для «Напомни за 3 дня» и кампаний)
-- ============================================================================
CREATE TABLE IF NOT EXISTS "REPORT_REMINDERS" (
    "ID" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "SUBJECT_ID" bigint NOT NULL,
    "REPORT_TYPE_ID" bigint NOT NULL,
    "PERIOD_ID" bigint NOT NULL,
    "REMIND_AT" timestamptz(6) NOT NULL,
    "CREATED_BY_USER_ID" bigint,
    "STATUS" varchar(20) NOT NULL DEFAULT 'scheduled', -- 'scheduled'|'sent'|'cancelled'
    "PAYLOAD" jsonb,                                   -- шаблон письма/сообщения и т.п.

    CONSTRAINT "REM_SUBJECT_FK" FOREIGN KEY ("SUBJECT_ID") REFERENCES "SUBJECTS"("ID") ON DELETE CASCADE,
    CONSTRAINT "REM_TYPE_FK"    FOREIGN KEY ("REPORT_TYPE_ID") REFERENCES "REPORT_TYPES"("ID") ON DELETE RESTRICT,
    CONSTRAINT "REM_PERIOD_FK"  FOREIGN KEY ("PERIOD_ID") REFERENCES "REPORTING_PERIODS"("ID") ON DELETE RESTRICT,
    CONSTRAINT "REM_USER_FK"    FOREIGN KEY ("CREATED_BY_USER_ID") REFERENCES "USERS"("ID") ON DELETE SET NULL,
    CONSTRAINT "REM_STATUS_CHK" CHECK ("STATUS" IN ('scheduled','sent','cancelled'))
);

CREATE INDEX IF NOT EXISTS "REM_WHEN_IDX" ON "REPORT_REMINDERS" ("REMIND_AT");
CREATE INDEX IF NOT EXISTS "REM_LOOKUP_IDX" ON "REPORT_REMINDERS" ("SUBJECT_ID","REPORT_TYPE_ID","PERIOD_ID");

COMMIT;

